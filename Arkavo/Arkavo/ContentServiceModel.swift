// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Content_RatingLevel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case unused = 0
  case none_ = 1
  case mild = 2
  case moderate = 3
  case severe = 4

  public static var max: Content_RatingLevel { return .severe }
  public static var min: Content_RatingLevel { return .unused }
}


public struct Content_Rating: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case violent = 4
    case sexual = 6
    case profane = 8
    case substance = 10
    case hate = 12
    case harm = 14
    case mature = 16
    case bully = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var violent: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.violent.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var sexual: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.sexual.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var profane: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.profane.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var substance: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.substance.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var hate: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.hate.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var harm: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.harm.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var mature: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.mature.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public var bully: Content_RatingLevel { let o = _accessor.offset(VTOFFSET.bully.v); return o == 0 ? .unused : Content_RatingLevel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unused }
  public static func startRating(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(violent: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: violent.rawValue, def: 0, at: VTOFFSET.violent.p) }
  public static func add(sexual: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sexual.rawValue, def: 0, at: VTOFFSET.sexual.p) }
  public static func add(profane: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: profane.rawValue, def: 0, at: VTOFFSET.profane.p) }
  public static func add(substance: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: substance.rawValue, def: 0, at: VTOFFSET.substance.p) }
  public static func add(hate: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hate.rawValue, def: 0, at: VTOFFSET.hate.p) }
  public static func add(harm: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: harm.rawValue, def: 0, at: VTOFFSET.harm.p) }
  public static func add(mature: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mature.rawValue, def: 0, at: VTOFFSET.mature.p) }
  public static func add(bully: Content_RatingLevel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bully.rawValue, def: 0, at: VTOFFSET.bully.p) }
  public static func endRating(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createRating(
    _ fbb: inout FlatBufferBuilder,
    violent: Content_RatingLevel = .unused,
    sexual: Content_RatingLevel = .unused,
    profane: Content_RatingLevel = .unused,
    substance: Content_RatingLevel = .unused,
    hate: Content_RatingLevel = .unused,
    harm: Content_RatingLevel = .unused,
    mature: Content_RatingLevel = .unused,
    bully: Content_RatingLevel = .unused
  ) -> Offset {
    let __start = Content_Rating.startRating(&fbb)
    Content_Rating.add(violent: violent, &fbb)
    Content_Rating.add(sexual: sexual, &fbb)
    Content_Rating.add(profane: profane, &fbb)
    Content_Rating.add(substance: substance, &fbb)
    Content_Rating.add(hate: hate, &fbb)
    Content_Rating.add(harm: harm, &fbb)
    Content_Rating.add(mature: mature, &fbb)
    Content_Rating.add(bully: bully, &fbb)
    return Content_Rating.endRating(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.violent.p, fieldName: "violent", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.sexual.p, fieldName: "sexual", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.profane.p, fieldName: "profane", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.substance.p, fieldName: "substance", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.hate.p, fieldName: "hate", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.harm.p, fieldName: "harm", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.mature.p, fieldName: "mature", required: false, type: Content_RatingLevel.self)
    try _v.visit(field: VTOFFSET.bully.p, fieldName: "bully", required: false, type: Content_RatingLevel.self)
    _v.finish()
  }
}

public struct Content_Purpose: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case educational = 4
    case entertainment = 6
    case news = 8
    case promotional = 10
    case personal = 12
    case opinion = 14
    case transactional = 16
    case harmful = 18
    case confidence = 20
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var educational: Float32 { let o = _accessor.offset(VTOFFSET.educational.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var entertainment: Float32 { let o = _accessor.offset(VTOFFSET.entertainment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var news: Float32 { let o = _accessor.offset(VTOFFSET.news.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var promotional: Float32 { let o = _accessor.offset(VTOFFSET.promotional.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var personal: Float32 { let o = _accessor.offset(VTOFFSET.personal.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var opinion: Float32 { let o = _accessor.offset(VTOFFSET.opinion.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var transactional: Float32 { let o = _accessor.offset(VTOFFSET.transactional.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var harmful: Float32 { let o = _accessor.offset(VTOFFSET.harmful.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var confidence: Float32 { let o = _accessor.offset(VTOFFSET.confidence.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public static func startPurpose(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 9) }
  public static func add(educational: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: educational, def: 0.0, at: VTOFFSET.educational.p) }
  public static func add(entertainment: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: entertainment, def: 0.0, at: VTOFFSET.entertainment.p) }
  public static func add(news: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: news, def: 0.0, at: VTOFFSET.news.p) }
  public static func add(promotional: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: promotional, def: 0.0, at: VTOFFSET.promotional.p) }
  public static func add(personal: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: personal, def: 0.0, at: VTOFFSET.personal.p) }
  public static func add(opinion: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opinion, def: 0.0, at: VTOFFSET.opinion.p) }
  public static func add(transactional: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: transactional, def: 0.0, at: VTOFFSET.transactional.p) }
  public static func add(harmful: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: harmful, def: 0.0, at: VTOFFSET.harmful.p) }
  public static func add(confidence: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidence, def: 0.0, at: VTOFFSET.confidence.p) }
  public static func endPurpose(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPurpose(
    _ fbb: inout FlatBufferBuilder,
    educational: Float32 = 0.0,
    entertainment: Float32 = 0.0,
    news: Float32 = 0.0,
    promotional: Float32 = 0.0,
    personal: Float32 = 0.0,
    opinion: Float32 = 0.0,
    transactional: Float32 = 0.0,
    harmful: Float32 = 0.0,
    confidence: Float32 = 0.0
  ) -> Offset {
    let __start = Content_Purpose.startPurpose(&fbb)
    Content_Purpose.add(educational: educational, &fbb)
    Content_Purpose.add(entertainment: entertainment, &fbb)
    Content_Purpose.add(news: news, &fbb)
    Content_Purpose.add(promotional: promotional, &fbb)
    Content_Purpose.add(personal: personal, &fbb)
    Content_Purpose.add(opinion: opinion, &fbb)
    Content_Purpose.add(transactional: transactional, &fbb)
    Content_Purpose.add(harmful: harmful, &fbb)
    Content_Purpose.add(confidence: confidence, &fbb)
    return Content_Purpose.endPurpose(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.educational.p, fieldName: "educational", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.entertainment.p, fieldName: "entertainment", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.news.p, fieldName: "news", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.promotional.p, fieldName: "promotional", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.personal.p, fieldName: "personal", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.opinion.p, fieldName: "opinion", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.transactional.p, fieldName: "transactional", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.harmful.p, fieldName: "harmful", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.confidence.p, fieldName: "confidence", required: false, type: Float32.self)
    _v.finish()
  }
}

public struct Content_Metadata: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case created = 4
    case rating = 6
    case purpose = 8
    case topics = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var created: Int64 { let o = _accessor.offset(VTOFFSET.created.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var rating: Content_Rating? { let o = _accessor.offset(VTOFFSET.rating.v); return o == 0 ? nil : Content_Rating(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var purpose: Content_Purpose? { let o = _accessor.offset(VTOFFSET.purpose.v); return o == 0 ? nil : Content_Purpose(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasTopics: Bool { let o = _accessor.offset(VTOFFSET.topics.v); return o == 0 ? false : true }
  public var topicsCount: Int32 { let o = _accessor.offset(VTOFFSET.topics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func topics(at index: Int32) -> UInt32 { let o = _accessor.offset(VTOFFSET.topics.v); return o == 0 ? 0 : _accessor.directRead(of: UInt32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var topics: [UInt32] { return _accessor.getVector(at: VTOFFSET.topics.v) ?? [] }
  public static func startMetadata(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(created: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: created, def: 0, at: VTOFFSET.created.p) }
  public static func add(rating: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rating, at: VTOFFSET.rating.p) }
  public static func add(purpose: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: purpose, at: VTOFFSET.purpose.p) }
  public static func addVectorOf(topics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: topics, at: VTOFFSET.topics.p) }
  public static func endMetadata(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMetadata(
    _ fbb: inout FlatBufferBuilder,
    created: Int64 = 0,
    ratingOffset rating: Offset = Offset(),
    purposeOffset purpose: Offset = Offset(),
    topicsVectorOffset topics: Offset = Offset()
  ) -> Offset {
    let __start = Content_Metadata.startMetadata(&fbb)
    Content_Metadata.add(created: created, &fbb)
    Content_Metadata.add(rating: rating, &fbb)
    Content_Metadata.add(purpose: purpose, &fbb)
    Content_Metadata.addVectorOf(topics: topics, &fbb)
    return Content_Metadata.endMetadata(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.created.p, fieldName: "created", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.rating.p, fieldName: "rating", required: false, type: ForwardOffset<Content_Rating>.self)
    try _v.visit(field: VTOFFSET.purpose.p, fieldName: "purpose", required: false, type: ForwardOffset<Content_Purpose>.self)
    try _v.visit(field: VTOFFSET.topics.p, fieldName: "topics", required: false, type: ForwardOffset<Vector<UInt32, UInt32>>.self)
    _v.finish()
  }
}

