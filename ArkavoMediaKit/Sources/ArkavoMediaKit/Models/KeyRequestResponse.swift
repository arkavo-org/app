import Foundation

/// Request body for POST /media/v1/key-request
public struct KeyRequestBody: Sendable, Codable {
    /// Session identifier from session/start
    public let sessionId: String

    /// FairPlay SPC (Server Playback Context) data - base64 encoded
    public let spcData: String

    /// Asset identifier
    public let assetId: String

    enum CodingKeys: String, CodingKey {
        case sessionId = "sessionId"
        case spcData
        case assetId
    }

    public init(sessionId: String, spcData: Data, assetId: String) {
        self.sessionId = sessionId
        self.spcData = spcData.base64EncodedString()
        self.assetId = assetId
    }
}

/// Response from POST /media/v1/key-request
public struct KeyRequestResponse: Sendable, Codable {
    /// FairPlay CKC (Content Key Context) data - base64 encoded
    public let ckcData: String

    /// Optional expiration timestamp
    public let expiresAt: Date?

    enum CodingKeys: String, CodingKey {
        case ckcData
        case expiresAt
    }

    public init(ckcData: String, expiresAt: Date? = nil) {
        self.ckcData = ckcData
        self.expiresAt = expiresAt
    }

    /// Decode CKC data from base64
    public func decodedCKC() throws -> Data {
        guard let data = Data(base64Encoded: ckcData) else {
            throw KeyRequestError.invalidCKCData
        }
        return data
    }
}

/// Heartbeat request body for POST /media/v1/session/:id/heartbeat
public struct HeartbeatRequest: Sendable, Codable {
    /// Current playback state
    public let state: String

    /// Optional playback position in seconds
    public let position: Double?

    public init(state: String, position: Double? = nil) {
        self.state = state
        self.position = position
    }
}

/// Key request errors
public enum KeyRequestError: Error, LocalizedError {
    case invalidCKCData
    case invalidSPCData
    case serverRejectedRequest(String)

    public var errorDescription: String? {
        switch self {
        case .invalidCKCData:
            "Invalid CKC data received from server"
        case .invalidSPCData:
            "Invalid SPC data generated by client"
        case .serverRejectedRequest(let reason):
            "Server rejected key request: \(reason)"
        }
    }
}
